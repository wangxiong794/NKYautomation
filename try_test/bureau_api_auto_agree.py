import json
import logging
import os
import time

import requests

root_dir = os.path.dirname(os.path.abspath(__file__))
service = [{
    "service": "jxt.neikongyi.com", "round": "14295", "userName": "cwk", "userId": "10068",
    "password": "mtzcFcMFUY5VHIvXjNiNPtwBXXEYpUr1XJZ3pzIbLkA=,zDGiNW5jJKhNaQ3ZSw2ZmSVTaKqxW/FT,0cV9KMZ5mrD5FllcNIbuiNmRPuJPsgTR5E8SA3RnwMuQEJXlZxDw/vMkYVh2eiju/MfFBweYqg0orGbe+6i9wCDDlp2IUk3Bct9iCxoNYak="
},{
     "service": "58.118.2.90", "round": "14371", "userName": "cwk", "userId": "10068",
    "password":"liFtCwsitGDMCI+3w1HAhY9BXqfzGj1H4UfIi9T8rmY=,1h94/xCbHm71s75eLCM5uOCwALy14gA9,n8C9w5uViqshmDm5thU0HYOj0PIBGcUxpXYpVi+/GtfeWU8vxK4Z2ebz4jt2WyOq8pdiiBJIcgyImaBupcX605xw3WcQg8vpd5VuoRh2aVA="
}
]


class workSpace():
    def __init__(self):

        useService = service[1]
        self.ip = useService['service']
        self.cookie = self.need_Verify_Code()
        self.user = useService['userName']
        self.password = useService['password']
        self.round = useService["round"]
        self.userId = useService["userId"]
        self.headers = {
            "Accept": "application/json",
            "Accept-Encoding": "gzip, deflate",
            "Accept-Language": "zh-CN,zh;q=0.9",
            "Connection": "keep-alive",
            'content-length': "240",
            'content-type': "application/json",
            'Cookie': self.cookie,
            "Host": self.ip,
            'origin': "http://" + self.ip,
            "Referer": "http://" + self.ip + "/nky",
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) "
                          "Chrome/80.0.3987.122 Safari/537.36",
            "x-Current-User-Id":self.userId
        }

    def need_Verify_Code(self):  # 获取cookie
        url = "http://" + self.ip + "/bureau/service/session/needVerifyCode"
        headers = {
            "Accept": "*/*",
            "Accept-Encoding": "gzip, deflate",
            "Accept-Language": "zh-CN,zh;q=0.9",
            "Connection": "keep-alive",
            "Host": self.ip,
            "Referer": "http://" + self.ip + "/bureau",
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.81 Safari/537.36",
        }
        _params = {'orgnizationId': 200}
        response = requests.request("GET", url, params=_params, headers=headers)
        header = eval(str(response.headers))  # 将请求后的字符类型先简单转成str，再换成dict
        set_cookie = header['Set-Cookie']
        cookie = set_cookie[0:43]
        print("cookie：" + str(cookie))
        return cookie

    def login(self):
        url = "http://" + self.ip + "/bureau/service/session/login"
        _payload = {
            "userName": self.user,
            "password": self.password,
            "round": self.round,

        }
        _headers = self.headers
        # del _headers['x-Current-User-Id']
        _response = requests.request("POST", url, data=json.dumps(_payload), headers=_headers)
        if '200' in str(_response):
            print("登录成功")
            return self.headers
        else:
            print("登录失败,错误码" + str(_response))
            return "登录失败，错误码" + str(_response)

    def gql_cwk_501(self):
        _payload = """{query: "", variables: null, operationName: null}"""
        # 返回报销单的打印模板ID，用于打印
        _url = "http://" + self.ip + "/bureau/service/graphql"
        _headers = self.headers
        print(_url)
        _response = requests.request("POST", _url, data=_payload, headers=_headers)
        # print(_response.text.encode('utf8'))
        print(_response.text)

    def auto_agree(self, app_id):
        _url = "http://" + self.ip + "/bureau/service/ApprovalLog/%s" % app_id
        _payload = {
            'approTempProperties': "{\"items\":[]}",
            'approvalDate': "2022-11-20T05:45:34.252Z",
            'approvalStatusId': '502',
            'description': "同意",
            'id': app_id
        }
        _response = requests.request("PUT", _url, data=json.dumps(_payload), headers=self.headers)
        print(str(_response),app_id)


if __name__ == "__main__":
    a = workSpace()
    a.login()
    # a.gql_cwk_501()
    for i in (269666,
269672,
269678,
269685,
269690,
269701,
269709,
269715,
269727,
269730,
269743,
269752,
269758,
269808,
269831,
269834,
269838,
269846,
269854,
269861,
269868,
269869,
269871,
269875,
269877,
269878,
269882,
269884,
269889,
269892,
269893,
269894,
269895,
269896,
269897,
269898,
269899,
269900,
269902,
269903,
269904,
269906,
269908,
269910,
269912,
269913,
269914,
269915,
269919,
269920,
269921,
269922,
269923,
269925,
269934,
269935,
269936,
269938,
269939,
269940,
269941,
269944,
269945,
269952,
269953,
269954,
269955,
269956,
269957,
269959,
269961,
269962,
269964,
269965,
269966,
269968,
269970,
269972,
269976,
269978,
269979,
269988,
270002,
270008,
270012,
270016,
270017,
270029,
270031,
270032,
270034,
270053,
270057,
270061,
270063,
270082,
270085,
270086,
270100,
270102,
270113,
270130,
270132,
270136,
270137,
270142,
270154,
270155,
270158,
270159,
270162,
270163,
270166,
270170,
270175,
270177,
270220,
270233,
270246,
270289,
270291,
270295,
270296,
270337,
270363,
270364,
270373,
270379,
270383,
270390,
270391,
270394,
270395,
270408,
270422,
270425,
270426,
270436,
270440,
270448,
270458,
270463,
270467,
270469,
270494,
270497,
270499,
270501,
270503,
270504,
270522,
270525,
270529,
270535,
270537,
270540,
270561,
270563,
270564,
270572,
270578,
270583,
270587,
270592,
270593,
270610,
270613,
270614,
270621,
270625,
270631,
270633,
270638,
270639,
270649,
270659,
270662,
270668,
270669,
270670,
270672,
270673,
270677,
270680,
270681,
270684,
270687,
270697,
270698,
270703,
270731,
270761,
270791,
270795,
270797,
270800,
270815,
270825,
270838,
270888,
270918,
270921,
270922,
270926,
270934,
270945,
270950,
270954,
270985,
271008,
271033,
271043,
271083,
271099,
271106,
271111,
271119,
271136,
271144,
271165,
271166,
271176,
271177,
271180,
271182,
271183,
271206,
271211,
271216,
271218,
271224,
271228,
271229,
271256,
271262,
271266,
271278,
271280,
271286,
271288,
271291,
271292,
271297,
271301,
271302,
271308,
271311,
271315,
271344,
271346,
271349,
271352,
271353,
271354,
271355,
271359,
271367,
271370,
271374,
271376,
271389,
271395,
271441,
271446,
271455,
271458,
271462,
271470,
271484,
271504,
271513,
271519,
271556,
271563,
271585,
271615,
271618,
271621,
271622,
271623,
271638,
271640,
271645,
271654,
271664,
271666,
271668,
271672,
271693,
271696,
271700,
271704,
271725,
271741,
271773,
271775,
271781,
271788,
271790,
271791,
271793,
271796,
271797,
271803,
271806,
271807,
271808,
271811,
271815,
271816,
271817,
271818,
271821,
271822,
271823,
271824,
271825,
271830,
271839,
271847,
271861,
271867,
271875,
271878,
271893,
271927,
271934,
271941,
271952,
272049,
272088,
272106,
272114,
272122,
272132,
272135,
272158,
272175,
272179,
272180,
272183,
272186,
272188,
272191,
272193,
272194,
272200,
272207,
272208,
272212,
272214,
272216,
272219,
272223,
272227,
272238,
272240,
272246,
272251,
272266,
272273,
272278,
272283,
272285,
272289,
272294,
272300,
272303,
272309,
272315,
272343,
272347,
272348,
272361,
272362,
272374,
272377,
272399,
272411,
272416,
272421,
272428,
272429,
272449,
272454,
272460,
272463,
272468,
272472,
272474,
272476,
272479,
272480,
272482,
272488,
272490,
272493,
272494,
272498,
272499,
272501,
272507,
272517,
272527,
272532,
272535,
272538,
272539,
272544,
272555,
272561,
272562,
272564,
272565,
272566,
272567,
272570,
272587,
272588,
272592,
272594,
272597,
272598,
272603,
272607,
272621,
272627,
272643,
272647,
272653,
272655,
272667,
272671,
272672,
):
        a.auto_agree(i)
        time.sleep(1)